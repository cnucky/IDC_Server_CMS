{"version":3,"sources":["ip.js"],"names":[],"mappings":"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","file":"ip-compiled.js","sourcesContent":["//加载ipSchema模型\r\nconst Ip = require('../modules/ip');\r\nconst Uip = require('../modules/uip');\r\nconst Engine = require('../modules/engineRoom');\r\nconst mongoose = require('mongoose');\r\nconst Use = require('../modules/use');\r\n//--------------------------ip地址池get路由\r\nexports.getIp = (req,res) => {\r\n  //获取ip地址机房信息\r\n  Engine.find({}, {'_id': 1, 'engineName': 1}, (err, engineData) => {\r\n    if (err) {\r\n      return res.json({'postStatus': 'error', 'msg': '机房信息查询失败,请稍后再试'});\r\n    }\r\n    //关联查询机房\r\n    Ip\r\n      .find({})\r\n      .populate('ipRoom')\r\n      .populate('ip')\r\n      .exec((err, ipEngineRoom) => {\r\n        if (err) {\r\n          return res.json({'postStatus': 'error', 'msg': '机房管理2关联查询失败,请稍候再试'});\r\n        }\r\n        return res.render('ip', {\r\n          title: 'Ip地址池管理',\r\n          session: req.session.username,\r\n          engineDocs: engineData,\r\n          ipEngineRoomDocs: ipEngineRoom\r\n        });\r\n      });\r\n  });\r\n};\r\n\r\n//-------------------------ip地址池更新\r\nexports.updateIp = (req,res) => {\r\n  //获取表单信息\r\n  let id = req.body.updateId;\r\n  let ipRoom = req.body.ipRoom;\r\n  let ipsMessage = req.body.ipsMessage;\r\n  //更新条件\r\n  let updateFind = {\r\n    '_id':id\r\n  };\r\n  //更新数据\r\n  let updateInfo = {\r\n    'ipRoom': ipRoom,\r\n    'ipsMessage': ipsMessage\r\n  };\r\n  //更新mongodb\r\n  Ip.update(updateFind,updateInfo,(err) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'更新数据失败,请稍后在试'});\r\n    }\r\n    return res.json({'postStatus':'success','msg':'更新数据成功'});\r\n  });\r\n};\r\n\r\n//-------------------------ip地址池删除\r\nexports.deleteIp = (req,res) => {\r\n  //获取id信息\r\n  let id = req.query.id;\r\n  //删除数据\r\n  Ip.remove({'_id':id},(err) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'ip地址池删除失败'});\r\n    }\r\n    Uip.remove({'big_id':id},(err) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'ip地址删除失败'});\r\n      }\r\n      return res.redirect('back');\r\n    });\r\n  })\r\n};\r\n\r\n//-------------------------ip地址段post写入到mongodb\r\nexports.postIp = (req,res) => {\r\n  //获取表单提交的数据\r\n  let ipStart = req.body.ipStart;\r\n  let ipEnd = req.body.ipEnd;\r\n  let ipRoom = req.body.ipRoom;\r\n  let ipsMessage = req.body.ipsMessage ? req.body.ipsMessage : '';\r\n  //判断准备写入的值是否存在\r\n  if(ipStart == '' || ipStart == null){\r\n    return res.json({'postStatus':'error','msg':'启始IP地址不能为空'});\r\n  };\r\n  if(ipEnd == '' || ipEnd == null){\r\n    return res.json({'postStatus':'error','msg':'结束IP地址不能为空'});\r\n  };\r\n  if(ipRoom == '' || ipRoom == null){\r\n    return res.json({'postStatus':'error','msg':'所属机房不能为空'});\r\n  };\r\n  let startSplit = ipStart.split('.');\r\n  let startNum = startSplit[3];\r\n  let endSplit = ipEnd.split('.');\r\n  let endNum = endSplit[3];\r\n  let ipLength = Number.parseInt(endNum) - Number.parseInt(startNum);\r\n  let ipArray = [];\r\n  for(let i=0; i <= ipLength; i++){\r\n    let arrayObj = startSplit[0] + '.' + startSplit[1] + '.' + startSplit[2] +'.' + (Number.parseInt(startSplit[3])+i);\r\n    ipArray.push(arrayObj);\r\n  }\r\n  //准备写入到mongodb\r\n  Ip.create({\r\n    'ipStart': ipStart,\r\n    'ipEnd': ipEnd,\r\n    'ipsMessage': ipsMessage,\r\n    'ipRoom':ipRoom\r\n  },(err,createIpData) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'IP地址池写入失败'});\r\n    }\r\n    //写入到Uip表信息\r\n    //创建entity文档模型\r\n    ipArray.forEach(function(data){\r\n      let uipEntity = new Uip({\r\n        'ip': data,\r\n        'big_id':createIpData._id,\r\n        'ipRoom': ipRoom\r\n      });\r\n      uipEntity.save((err,data) => {\r\n        if(err){\r\n          return console.log('插入失败');\r\n        }\r\n        Ip.update({'_id':data.big_id},{$push:{'ip':data._id}},(err,update) => {\r\n          if(err){\r\n            return console.log('添加失败');\r\n          }\r\n        })\r\n      });\r\n    });\r\n    return res.json({'postStatus':'success','msg':'ip地址插入成功'});\r\n  });\r\n};\r\n\r\n//--------------------------具体某条ip地址\r\nexports.pId = (req,res) => {\r\n  //获取当前ip池的id信息\r\n  let id = req.query.id;\r\n  let idObject = mongoose.Types.ObjectId(id);\r\n  let page = req.query.page ? Number.parseInt(req.query.page) : 1;\r\n  let limits = 256;\r\n  //  let limits = 25;\r\n  Uip.count({'big_id':idObject},(err,total) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'返回Ip总条数失败'});\r\n    }\r\n    Use.find({},null,(err,useData) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'关联查询用途管理失败'});\r\n      }\r\n      Uip\r\n          .find({'big_id':idObject})\r\n          .skip((page - 1) * limits )\r\n          .limit(limits)\r\n          .populate('ipUse')\r\n          .populate('ipRoom')\r\n          .exec((err,ipListData) => {\r\n            if(err){\r\n              return res.json({'postStatus':'error','msg':'此ip段无法访问系统错误'});\r\n            }\r\n            return res.render('pid',{\r\n              title:'ip地址信息',\r\n              session:req.session.username,\r\n              ipDocs: ipListData,\r\n              useDocs: useData,\r\n              isFirstPage: (page - 1) == 0,\r\n              isLastPage: ((page -1) * limits + Number.parseInt(ipListData.length)) == total,\r\n              page: page\r\n            });\r\n          });\r\n    });\r\n  });\r\n\r\n};\r\n//-----------------------------search查询\r\nexports.newId = (req,res) => {\r\n  let searchStr = req.body.stringStr;\r\n  if(searchStr.length <= 0){\r\n    return res.json({'postStatus':'error','msg':'ip地址不能为空'})\r\n  }\r\n  Uip\r\n    .findOne({'ip':searchStr})\r\n    .populate('ipUse')\r\n    .exec((err,searchData) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'ip地址查询失败'})\r\n      }\r\n      return res.json({'postStatus':'success','msg':searchData})\r\n    });\r\n};\r\n\r\n//---------------------------批量更新\r\nexports.UpdateId = (req,res) => {\r\n  //获取表单数据\r\n  let idArray = req.body.idData;\r\n  if(idArray == null || idArray == ''){\r\n    return res.json({'postStatus':'error','msg':'请选择需要修改的ip'});\r\n  }\r\n  let info = req.body.infoData;\r\n  let strArray = idArray.split('&');\r\n  let idS = [];\r\n  let inS = [];\r\n  for(let i =0; i< strArray.length; i++){\r\n    let id = strArray[i].split('uid=');\r\n    idS.push(id[1]);\r\n  }\r\n  let infoArray = info.split('&');\r\n  for(let j =0; j< infoArray.length; j++){\r\n    let message = infoArray[j].split('=');\r\n    inS.push(message[1]);\r\n  };\r\n  //准备更新数据\r\n  Uip.update({'ip':{'$in':idS}},{\r\n    'ipMark':inS[0],\r\n    'ipDisplay':inS[1],\r\n    'ipInfo':decodeURI(inS[2]),\r\n    'ipUse': mongoose.Types.ObjectId(inS[3])\r\n  },{multi:true},(err,data) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'更新出错'});\r\n    };\r\n    return res.json({'postStatus':'success','msg':'更新完成'});\r\n  });\r\n};\r\n"]}