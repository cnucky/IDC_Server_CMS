{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["//引入mongoose对象以及依赖的其他模型\r\nconst Ip = require('../modules/ip');\r\nconst Uip = require('../modules/uip');\r\nconst Engine = require('../modules/engineRoom');\r\nconst Use = require('../modules/use');\r\nconst Server = require('../modules/server');\r\nconst Cabinets = require('../modules/cabinet');\r\nconst Host = require('../modules/serverHost');\r\nconst mongoose = require('mongoose');\r\n//---------------server服务器管理get路由\r\nexports.getServer = (req,res) => {\r\n  let page = req.query.page ? Number.parseInt(req.query.page) : 1;\r\n  let limits = 15;\r\n  Engine.find({},null,(err,serverEngine) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'服务器机房查询失败'})\r\n    }\r\n    Use.find({},null,(err,serverUse) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'服务器用途查询失败'})\r\n      }\r\n      Cabinets.find({},null,(err,cabData) => {\r\n        if(err){\r\n          return res.json({'postStatus':'error','msg':'服务器所属机柜查询失败'})\r\n        }\r\n        //首页分页路由\r\n        Server.count({},(err,total) => {\r\n            if(err){\r\n                return res.json({'postStatus':'error','msg':'返回服务器总条数失败'});\r\n            }\r\n            Server.find({},null,{'skip':(page - 1)*limits,'limit':limits},(err,serverInfo) => {\r\n              if(err){\r\n                return res.json({'postStatus':'error','msg':'服务器信息查询失败'})\r\n              }\r\n              return res.render('server',{\r\n                title: '服务器管理',\r\n                session: req.session.username,\r\n                engineDocs: serverEngine,\r\n                useDocs: serverUse,\r\n                serverData: serverInfo,\r\n                cabDocs:cabData,\r\n                isFirstPage: (page - 1) == 0,\r\n                isLastPage: (page -1)*limits + Number.parseInt(serverInfo.length) == total,\r\n                page: page,\r\n                maxPage : Math.floor((total + limits -1) / limits),\r\n              });\r\n            });\r\n        });\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\n//------------------server添加一条服务器信息\r\nexports.createServer = (req,res) => {\r\n  //获取表单数据\r\n  let serverId = req.body.serverId;\r\n  let serverCab = req.body.serverCab;\r\n  let price = req.body.price;\r\n  let serverCpu = req.body.serverCpu;\r\n  let board = req.body.board;\r\n  let memories = req.body.memories;\r\n  let nic = req.body.nic;\r\n  let bandwidth = req.body.bandwidth;\r\n  let serverRoom = req.body.serverRoom;\r\n  let serverIpAddress = req.body.serverIpAddress;\r\n  let serverUse = req.body.serverUse;\r\n  let ipArray = req.body.serverIP;\r\n  let shelvesTime = req.body.shelvesTime;\r\n  let serverInfo = req.body.serverInfo;\r\n  let serverUrl = req.body.serverUrl;\r\n  let serverUser = req.body.serverUser;\r\n  let serverPass = req.body.serverPass;\r\n  let yd = req.body.yd;\r\n  if(serverId == '' || serverId == null){\r\n    return res.json({'postStatus':'error','msg':'服务器编号不能为空'})\r\n  }\r\n  //查询此服务器编号是否以写入\r\n  Server.findOne({'serverId':serverId},null,(err,newId) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'查询服务器出错，请稍后再试'});\r\n    }\r\n    //判断此id是否存在\r\n    if(newId){\r\n      return res.json({'postStatus':'error','msg':'当前服务器'+serverId+'已录入'});\r\n    };\r\n    if(serverRoom == ''){\r\n      //准备写入到数据库\r\n      Server.create({\r\n        'serverId':serverId,\r\n        'serverCab':mongoose.Types.ObjectId(serverCab),\r\n        'cpu': serverCpu,\r\n        'board': board,\r\n        'memories':memories,\r\n        'nic':nic,\r\n        'bandwidth':bandwidth,\r\n        'ip':ipArray,\r\n        'price':price,\r\n        'shelvesTime':shelvesTime,\r\n        'serverInfo':serverInfo,\r\n        'serverAdmin.serverUrl':serverUrl,\r\n        'serverAdmin.serverUser':serverUser,\r\n        'serverAdmin.serverPass':serverPass,\r\n        'yd':yd\r\n      },(err,createData) => {\r\n        if(err){\r\n          return res.json({'postStatus':'error','msg':'服务器添加失败'})\r\n        }\r\n        //更新ip表信息\r\n        Uip.update({'ip':{'$in':ipArray}},{'ipMark':true,'server':serverId},{multi:true},(err,data) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'服务器添加完成,ip信息更新失败'})\r\n          }\r\n          return res.json({'postStatus':'success','msg':'服务器添加完成'})\r\n        });\r\n      });\r\n    }else{\r\n      //准备写入到数据库\r\n      Server.create({\r\n        'serverId':serverId,\r\n        'serverCab':mongoose.Types.ObjectId(serverCab),\r\n        'cpu': serverCpu,\r\n        'board': board,\r\n        'memories':memories,\r\n        'nic':nic,\r\n        'bandwidth':bandwidth,\r\n        'ip':ipArray,\r\n        'price':price,\r\n        'shelvesTime':shelvesTime,\r\n        'serverInfo':serverInfo,\r\n        'serverRoom':mongoose.Types.ObjectId(serverRoom),\r\n        'serverIp':mongoose.Types.ObjectId(serverIpAddress),\r\n        'serverUse':mongoose.Types.ObjectId(serverUse),\r\n        'serverAdmin.serverUrl':serverUrl,\r\n        'serverAdmin.serverUser':serverUser,\r\n        'serverAdmin.serverPass':serverPass,\r\n        'yd':yd\r\n      },(err,createData) => {\r\n        if(err){\r\n          return res.json({'postStatus':'error','msg':'服务器添加失败'})\r\n        }\r\n        //更新ip表信息\r\n        Uip.update({'ip':{'$in':ipArray}},{'ipMark':true,'server':serverId},{multi:true},(err,data) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'服务器添加完成,ip信息更新失败'})\r\n          }\r\n          return res.json({'postStatus':'success','msg':'服务器添加完成'})\r\n        });\r\n      });\r\n    }\r\n\r\n  });\r\n};\r\n\r\n//------------------server某条信息\r\nexports.getOne = (req,res) => {\r\n  let id = req.params.id;\r\n  if(id == '' || id == null){\r\n    return res.json({'postStatus':'error','msg':'id值不能为空'})\r\n  };\r\n  Server\r\n    .findOne({'serverId':id})\r\n    .populate('serverRoom')\r\n    .populate('serverIp')\r\n    .populate('serverUse')\r\n    .populate('serverCab')\r\n    .exec((err,serverOne) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'此服务器查询出错请稍候再试'})\r\n      }\r\n      Host.find({'server.server':serverOne._id},null,(err,hostData) => {\r\n          if(err){\r\n              return res.json({'postStatus':'error','msg':'此服务器历史记录查询出错请稍候再试'})\r\n          }\r\n          return res.render('serverOne',{\r\n              title:'服务器信息',\r\n              session: req.session.username,\r\n              serverDocs: serverOne,\r\n              hostDocs: hostData\r\n          })\r\n      });\r\n    });\r\n};\r\n\r\n//------------------server服务器某数据删除\r\nexports.deleteId = (req,res) => {\r\n  //获取表单提交数据\r\n  let id = req.query.id;\r\n  Server.findById({'_id':id},(err,data) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'服务器删除失败'});\r\n    }\r\n\t//console.log(data.ip);\r\n    //准备更新IP地址数据\r\n    Uip.update({'ip':{'$in':data.ip}},{'ipMark':false,'server':''},{multi:true},(err,updateDatas) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'IP地址更新失败'});\r\n      }\r\n      //删除信息\r\n      Server.remove({'_id':id},(err) => {\r\n        if(err){\r\n          return res.json({'postStatus':'error','msg':'服务器删除失败'})\r\n        }\r\n        return res.redirect('back');\r\n      });\r\n    });\r\n  });\r\n};\r\n//------------------server联动查询ip段\r\nexports.getIps = (req,res) => {\r\n  //获取字段id\r\n  let id = req.query.id;\r\n  if(id == '' || id == null){\r\n    return console.log('机房不能为空字段');\r\n  };\r\n  let queryId = mongoose.Types.ObjectId(id);\r\n  Ip.find({'ipRoom':queryId},null,(err,ipsData) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'ip段查询出错'});\r\n    }\r\n    return res.json({'postStatus':'success','msg':ipsData});\r\n  })\r\n};\r\n//-----------------server联动查询获取ip地址\r\nexports.getIP = (req,res) => {\r\n  //获取表单数据\r\n//let uip = req.query['big_id'];\r\n  let useId = req.query.use;\r\n  if(useId == ''){\r\n    return console.log('请选择ip地址段以及ip地址用途,在进行操作');\r\n  };\r\n//let ips = mongoose.Types.ObjectId(uip);\r\n  let use = mongoose.Types.ObjectId(useId);\r\n  //查询ip表数据库\r\n  Uip.find({'ipUse':use,'ipMark':'false','ipDisplay':'true'},null,(err,ipData) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'ip地址查询出错'});\r\n    }\r\n    return res.json({'postStatus':'success','msg':ipData});\r\n  });\r\n};\r\n\r\n//更新数据获取表单信息\r\nexports.updateInfo = (req,res) => {\r\n  //获取表单数据\r\n  let id = req.body.id;\r\n  //准备查询id\r\n  if(id == '' || id == null){\r\n    return false;\r\n  };\r\n  Server.findById({'_id':id},(err,updateInfo) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'更新数据失败,无法更新'});\r\n    }\r\n    //返回sql结果\r\n    return res.json({'postStatus':'success','msg':updateInfo});\r\n  });\r\n};\r\n\r\n//----------------------更新server服务器\r\nexports.updateServer = (req,res) => {\r\n  //获取表单数据\r\n  let myId = req.body.myId;\r\n  let serverCab = req.body.updateCab;\r\n  let cpu = req.body.updateCpu;\r\n  let board = req.body.updateBoard;\r\n  let memories = req.body.updateMemories;\r\n  let yd = req.body.updateYd;\r\n  let nic = req.body.updateNic;\r\n  let bandwidth = req.body.updateBandwidth;\r\n  let serverRoom = req.body.updateRoom;\r\n  let serverIpAddress = req.body.updateIpAddress;\r\n  let serverUse = req.body.updateUse;\r\n  let serverIP = req.body.updateIP;\r\n  let serverUrl = req.body.updateUrl;\r\n  let serverUser = req.body.updateUser;\r\n  let serverPass = req.body.updatePass;\r\n  let serverInfo = req.body.updateInfo;\r\n  let hostInfo = req.body.hostInfo;\r\n  let time = new Date();\r\n  let hostUser = req.session.username;\r\n  let uid = null;\r\n  let ip = null;\r\n  let cId = req.body.cId;\r\n  if(req.body.uid == null){\r\n    uid = [];\r\n  }else{\r\n    uid = req.body.uid;\r\n    ip = uid.split(',');\r\n  }\r\n  let updateMark = req.body.updateMark;\r\n  //判断当前状态\r\n  if(updateMark == 1){\r\n    //更新数据不更新IP\r\n    Server.update({'_id':myId},\r\n        {\r\n          'serverCab':mongoose.Types.ObjectId(serverCab),\r\n          'cpu': cpu,\r\n          'board': board,\r\n          'memories':memories,\r\n          'nic':nic,\r\n          'bandwidth':bandwidth,\r\n          'serverInfo':serverInfo,\r\n          'serverAdmin.serverUrl':serverUrl,\r\n          'serverAdmin.serverUser':serverUser,\r\n          'serverAdmin.serverPass':serverUser,\r\n          'yd':yd\r\n        },(err,updateData) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'更新服务器失败'})\r\n          }\r\n            Host.create({\r\n                'server.serverName':hostUser,\r\n                'server.serverTime':time,\r\n                'server.serverInfoS':hostInfo,\r\n                'server.server':mongoose.Types.ObjectId(myId)\r\n            },(err,createData) => {\r\n                if(err){\r\n                    return res.json({'postStatus':'error','msg':'插入历史记录表失败'})\r\n                }\r\n                return res.json({'postStatus':'success','msg':'更新服务器成功'})\r\n            });\r\n        });\r\n  }else if(updateMark == 2){\r\n        let thisIp = req.body.thisIp;\r\n        if((typeof thisIp) == 'string'){\r\n            thisIp = [thisIp]\r\n        };\r\n        let a= new Set(thisIp);  //转化成set函数\r\n        let b = new Set(ip);\r\n        let differenceABSet = new Set([...b].filter(x => !a.has(x)));  //去ip字段跟当前选中字段的差集\r\n        let arr = Array.from(differenceABSet);\r\n        //更新当前数据\r\n        Uip.update({'ip':{'$in':arr}},{'ipMark':false,'server':''},{multi:true},(err,ipMarkData) =>{\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'更新IP地址失败'})\r\n          }\r\n          //准备更新server\r\n          Server.update({'_id':myId},\r\n            {\r\n              'serverCab':mongoose.Types.ObjectId(serverCab),\r\n              'cpu': cpu,\r\n              'board': board,\r\n              'memories':memories,\r\n              'nic':nic,\r\n              'bandwidth':bandwidth,\r\n              'serverInfo':serverInfo,\r\n              'ip': thisIp,\r\n              'serverAdmin.serverUrl':serverUrl,\r\n              'serverAdmin.serverUser':serverUser,\r\n              'serverAdmin.serverPass':serverUser,\r\n              'yd':yd\r\n            },(err,updateData) => {\r\n              if(err){\r\n                return res.json({'postStatus':'error','msg':'更新服务器失败'})\r\n              }\r\n              Host.create({\r\n                  'server.serverName':hostUser,\r\n                  'server.serverTime':time,\r\n                  'server.serverInfoS':hostInfo,\r\n                  'server.server':mongoose.Types.ObjectId(myId)\r\n              },(err,createData) => {\r\n                  if(err){\r\n                      return res.json({'postStatus':'error','msg':'插入历史记录表失败'})\r\n                  }\r\n                  return res.json({'postStatus':'success','msg':'更新服务器成功'})\r\n              });\r\n            });\r\n        });\r\n  }else if(updateMark == 3){\r\n        //更新ip地址\r\n        Uip.update({'ip':{'$in':ip}},{'ipMark':false,'server':''},{multi:true},(err,ipMarkData) =>{\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'更新IP地址失败'})\r\n          }\r\n          //准备更新server\r\n          Server.update({'_id':myId},\r\n            {\r\n              'serverCab':mongoose.Types.ObjectId(serverCab),\r\n              'cpu': cpu,\r\n              'board': board,\r\n              'memories':memories,\r\n              'nic':nic,\r\n              'bandwidth':bandwidth,\r\n              'serverInfo':serverInfo,\r\n              'ip': serverIP,\r\n              'serverRoom':mongoose.Types.ObjectId(serverRoom),\r\n              'serverIp':mongoose.Types.ObjectId(serverIpAddress),\r\n              'serverUse':mongoose.Types.ObjectId(serverUse),\r\n              'serverAdmin.serverUrl':serverUrl,\r\n              'serverAdmin.serverUser':serverUser,\r\n              'serverAdmin.serverPass':serverUser,\r\n              'yd':yd\r\n            },(err,updateData) => {\r\n              if(err){\r\n                return res.json({'postStatus':'error','msg':'更新服务器失败'})\r\n              }\r\n              Uip.update({'ip':{'$in':serverIP}},{'ipMark':true,'server':cId},{multi:true},(err,ipMarkData) =>{\r\n                if(err){\r\n                  return res.json({'postStatus':'error','msg':'更新Ip关联失败'})\r\n                }\r\n                  Host.create({\r\n                      'server.serverName':hostUser,\r\n                      'server.serverTime':time,\r\n                      'server.serverInfoS':hostInfo,\r\n                      'server.server':mongoose.Types.ObjectId(myId)\r\n                  },(err,createData) => {\r\n                      if(err){\r\n                          return res.json({'postStatus':'error','msg':'插入历史记录表失败'})\r\n                      }\r\n                      return res.json({'postStatus':'success','msg':'更新服务器成功'})\r\n                  });\r\n              });\r\n            });\r\n        });\r\n  }else if(updateMark == 4){\r\n        //清楚ip地址\r\n        Uip.update({'ip':{'$in':ip}},{'ipMark':false,'server':''},{multi:true},(err,ipMarkData) => {\r\n          if (err) {\r\n            return res.json({'postStatus': 'error', 'msg': '更新IP地址失败'})\r\n          }\r\n          //准备更新server\r\n          Server.update({'_id': myId},\r\n              {\r\n                'serverCab': mongoose.Types.ObjectId(serverCab),\r\n                'cpu': cpu,\r\n                'board': board,\r\n                'memories': memories,\r\n                'nic': nic,\r\n                'bandwidth': bandwidth,\r\n                'serverInfo': serverInfo,\r\n                'ip': [],\r\n                'serverAdmin.serverUrl': serverUrl,\r\n                'serverAdmin.serverUser': serverUser,\r\n                'serverAdmin.serverPass': serverUser,\r\n                'yd': yd\r\n              }, (err, updateData) => {\r\n                if (err) {\r\n                  return res.json({'postStatus': 'error', 'msg': '更新服务器失败'})\r\n                }\r\n                  Host.create({\r\n                      'server.serverName':hostUser,\r\n                      'server.serverTime':time,\r\n                      'server.serverInfoS':hostInfo,\r\n                      'server.server':mongoose.Types.ObjectId(myId)\r\n                  },(err,createData) => {\r\n                      if(err){\r\n                          return res.json({'postStatus':'error','msg':'插入历史记录表失败'})\r\n                      }\r\n                      return res.json({'postStatus':'success','msg':'更新服务器成功'})\r\n                  });\r\n              });\r\n        });\r\n  }\r\n};\r\n\r\n//----------------------------------服务器搜索\r\nexports.searchS = (req,res) => {\r\n    let id = req.body.id;\r\n    if(id.length <= 0){\r\n        return res.json({'postStatus':'error','msg':'服务器编号不能为空'});\r\n    }\r\n\tid = id.trim();\r\n    Server.findOne({'serverId':id},null,(err,searchData) => {\r\n        if(err){\r\n            return res.json({'postStatus':'error','msg':'查询服务器失败'});\r\n        }\r\n        return res.json({'postStatus':'success','msg':searchData});\r\n    });\r\n};\r\nexports.searchI = (req,res) => {\r\n    let id = req.body.id;\r\n    if(id.length <= 0){\r\n        return res.json({'postStatus':'error','msg':'服务器IP不能为空'});\r\n    }\r\n\tid = id.trim();\r\n    //判断传入值是否存在','\r\n    if(id.includes(',')){\r\n        //存在截取字符串\r\n        id = id.split(',');\r\n    }else{\r\n        //不存在判断是否为字符串\r\n        if(typeof id == 'string'){\r\n            id = [id];\r\n        }\r\n    };\r\n    Server.findOne({'ip':{'$in':id}},null,(err,searchData) => {\r\n        if(err){\r\n            return res.json({'postStatus':'error','msg':'查询服务器失败可能未与IP地址关联'});\r\n        }\r\n        return res.json({'postStatus':'success','msg':searchData});\r\n    });\r\n};\r\n//-----------------------查询机柜\r\nexports.searchCab = (req,res) => {\r\n  let id = req.body.id;\r\n  if(id.length <= 0){\r\n    return res.json({'postStatus':'error','msg':'机柜编号不能为空'});\r\n  }\r\n  id = id.trim().toUpperCase();\r\n  Cabinets.findOne({'cabinetsId':id},null,(err,getId) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'服务器机柜查询出错'});\r\n    }\r\n\t\tif(getId == null){\r\n\t\t  return res.json({'postStatus': 'success', 'msg': getId});\r\n\t\t}else {\r\n\t\t  let ids = mongoose.Types.ObjectId(getId._id);\r\n\t\t  Server\r\n\t\t\t.find({'serverCab': ids})\r\n\t\t\t.populate('serverCab')\r\n\t\t\t.exec((err, searchData) => {\r\n\t\t\t  if (err) {\r\n\t\t\t\treturn res.json({'postStatus': 'error', 'msg': '查询服务器失败可能未与IP地址关联'});\r\n\t\t\t  }\r\n\t\t\t  return res.json({'postStatus': 'success', 'msg': searchData});\r\n\t\t\t});\r\n\t\t};\r\n    });\r\n};"]}