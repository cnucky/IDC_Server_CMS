{"version":3,"sources":["userLogin.js"],"names":[],"mappings":"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","file":"userLogin-compiled.js","sourcesContent":["let crypto = require('crypto');\r\nconst User = require('../modules/user');\r\n//------------------------------------网站登录页面理由\r\nexports.login = (req,res) => {\r\n  res.render('login',{\r\n    title: '用户登录'\r\n  });\r\n};\r\n//-------------------------------------网站登录页面处理逻辑\r\nexports.postLogin = (req,res) => {\r\n  //获取表单提交的数据\r\n  let username = req.body.username;\r\n  let password = req.body.password;\r\n  //判断当前值是否为空\r\n  if(username == '' || username == null){\r\n    return res.json({'postStatus':'error','msg':'用户名不能为空'});\r\n  };\r\n  if(password == '' || password == null){\r\n    return res.json({'postStatus':'error','msg':'密码不能为空'});\r\n  };\r\n  //加密password密码\r\n  let md5 = crypto.createHash('md5');\r\n  let md5Password = md5.update(password).digest('hex');\r\n  //查询数据库\r\n  User.findOne({'admin.username':username},(err,user) => {\r\n    if(!user){\r\n      return res.json({'postStatus':'error','msg':'此用户不存在,请重新输入'});\r\n    };\r\n    //判断输入的密码是否符合数据库存入的密码\r\n    if(md5Password != user.admin.password){\r\n      return res.json({'postStatus':'error','msg':'密码不正确，请重新输入'});\r\n    };\r\n    //存储session\r\n    req.session.username = username;\r\n    //返回json信息\r\n    return res.json({'postStatus':'success','msg':'登陆完成，欢迎访问'});\r\n  });\r\n};\r\n//-------------------------------------用户退出路由\r\nexports.logout = (req,res) => {\r\n  //session值赋值为空\r\n  req.session.username = null;\r\n  return res.redirect('/');\r\n};\r\n//-------------------------------------用户注册路由\r\nexports.reg = (req,res) => {\r\n  res.render('reg',{\r\n    title: '用户注册'\r\n  });\r\n};\r\n//--------------------------------------用户注册处理逻辑\r\nexports.register = (req,res) => {\r\n  //获取用户信息;\r\n  let username = req.body.username;\r\n  let password = req.body.password;\r\n  let pass_repeat = req.body['pass_repeat'];\r\n  //判断当前值事后为空\r\n  if(username == '' || username == null){\r\n    return res.json({'postStatus':'error','msg':'用户名不能为空'});\r\n  };\r\n  if(password == '' || password == null){\r\n    return res.json({'postStatus':'error','msg':'密码不能为空'});\r\n  };\r\n  if(pass_repeat == '' || pass_repeat == null){\r\n    return res.json({'postStatus':'error','msg':'密码不能为空'});\r\n  };\r\n  if(password != pass_repeat){\r\n    return res.json({'postStatus':'error','msg':'两次密码输入不一致'});\r\n  };\r\n  //加密密码字段\r\n  let md5 = crypto.createHash('md5');\r\n  let md5Password = md5.update(password).digest('hex');\r\n //查询数据库判断当前管理员用户是否存在\r\n  User.findOne({'admin.username':username},(err,user)=>{\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'find Error: ' + err});\r\n    };\r\n    if(user){\r\n      return res.json({'postStatus':'error','msg':'Ajax Error: 当前用户' + username + '已存在!'});\r\n    };\r\n    //当前post过来的username不存在写入到mongodb\r\n    User.create({\r\n      'admin.username': username,\r\n      'admin.password': md5Password,\r\n      'user':{}\r\n    },(err,data) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'Create Error: ' + err});\r\n      }\r\n      //写入session\r\n      req.session.username = username;\r\n      //返回success json信息\r\n      return res.json({'postStatus':'success','msg':'注册成功,欢迎访问本站点'});\r\n    });\r\n  });\r\n};"]}