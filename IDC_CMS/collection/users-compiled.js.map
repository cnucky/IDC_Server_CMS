{"version":3,"sources":["users.js"],"names":[],"mappings":"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","file":"users-compiled.js","sourcesContent":["//引入mongoose对象以及依赖的其他模型\r\nconst Ip = require('../modules/ip');\r\nconst Uip = require('../modules/uip');\r\nconst Engine = require('../modules/engineRoom');\r\nconst Use = require('../modules/use');\r\nconst Server = require('../modules/server');\r\nconst Cabinets = require('../modules/cabinet');\r\nconst Host = require('../modules/serverHost');\r\nconst User = require('../modules/user');\r\nconst mongoose = require('mongoose');\r\n//---------------user用户管理get路由\r\nexports.getUser = (req,res) => {\r\n  //\r\n  let page = req.query.page ? Number.parseInt(req.query.page) : 1;\r\n  let limits = 15;\r\n  Server.find({'serverMark':false},{'_id':1,'serverId':1},(err,serverDocs) =>{\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'服务器查询出错'})\r\n    }\r\n    User.count({'user.search':true},(err,total) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'总页数查询失败'});\r\n      }\r\n      User.find({'user.createUser':true},{'user.webName':1},(err,thisUser) => {\r\n        if(err){\r\n          return res.json({'postStatus':'error','msg':'无用户'});\r\n        }\r\n        User.find({'user.search':true}).skip((page - 1)*limits).limit(limits).populate('user.serverTo').sort({'_id':-1}).exec((err,usersDocs) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'用户查询出错'})\r\n          }\r\n          return res.render('user',{\r\n            title:'用户管理',\r\n            session : req.session.username,\r\n            serverData: serverDocs,\r\n            usersData: usersDocs,\r\n            isFirstPage: (page - 1) == 0,\r\n            isLastPage: (page -1)*limits + Number.parseInt(usersDocs.length) == total,\r\n            page: page,\r\n            thisDocs: thisUser,\r\n            maxPage : Math.floor((total + limits -1) / limits),\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\n//----------------查找某用户\r\nexports.searchOneUser = (req,res) => {\r\n  let username = req.body.usernameS;\r\n  if(username == '' || username == undefined){\r\n    return res.json({'postStatus':'error','msg':'无法识别,用户名不能为空'})\r\n  };\r\n  User.find({'user.createUser':true,'user.webName':new RegExp(username)},{'user.webName':1},(err,thisUser) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'无用户'});\r\n    }\r\n    return res.json({'postStatus':'success','msg':thisUser});\r\n  });\r\n};\r\n//---------------写入用户\r\nexports.createServerUser = (req,res) => {\r\n  //获取表单数据\r\n  let webName = req.body.webName.trim();\r\n  let username = req.body.username;\r\n  let userCarded = req.body.userCarded;\r\n  let userPhoneNumber = req.body.userPhoneNumber;\r\n  let userQQ = req.body.userQQ;\r\n  let userAddress = req.body.userAddress;\r\n  if(webName == '' || webName == null){\r\n    return res.json({'postStatus':'error','msg':'用户名称不能为空'})\r\n  }\r\n  User.create({\r\n    'user.webName':webName,\r\n    'user.username':username,\r\n    'user.userCarded':userCarded,\r\n    'user.userPhoneNumber':userPhoneNumber,\r\n    'user.userQQ':userQQ,\r\n    'user.userAddress':userAddress,\r\n    'user.createUser':true,\r\n  },(err,createServerUser) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'用户新增出错'})\r\n    }\r\n    return res.json({'postStatus':'success','msg':'用户添加完成'});\r\n  });\r\n};\r\n//写入新数据\r\nexports.createUser = (req,res) => {\r\n  //获取表单数据\r\n  let ThisUsers = req.body.ThisUsers;\r\n  let userPayment = req.body.userPayment;\r\n  let userTo = req.body.userTo;\r\n  let serverTo = req.body.serverTo ? req.body.serverTo : '';\r\n  let isPayment = req.body.isPayment;\r\n  let time = new Date();\r\n  let endTime = req.body.endTime;\r\n  let webName = null;\r\n  let username = null;\r\n  let userCarded = null;\r\n  let userPhoneNumber = null;\r\n  let userQQ = null;\r\n  let userAddress = null;\r\n  //获取用户信息\r\n  User.findOne({'user.webName':ThisUsers},{'user':1},(err,dataS) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'用户信息查询失败'});\r\n      }else{\r\n        webName = dataS.user.webName;\r\n        username = dataS.user.username;\r\n        userCarded = dataS.user.userCarded;\r\n        userPhoneNumber = dataS.user.userPhoneNumber;\r\n        userQQ = dataS.user.userQQ;\r\n        userAddress = dataS.user.userAddress;\r\n        createUser = dataS.user.createUser;\r\n        //更新当前服务器数据\r\n        User.create({\r\n          'user.webName':webName,\r\n          'user.username':username,\r\n          'user.userCarded':userCarded,\r\n          'user.userPhoneNumber':userPhoneNumber,\r\n          'user.userQQ':userQQ,\r\n          'user.userAddress':userAddress,\r\n          'user.userPayment':userPayment,\r\n          'user.userTo':userTo,\r\n          'user.serverTo':serverTo,\r\n          'user.isPayment':isPayment,\r\n          'user.search':true,\r\n        },(err,createData) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'用户新增出错'})\r\n          }\r\n          //更新服务器信息\r\n          Server.update({'_id':serverTo},{'serverMark':true,'startTime':time,'endTime':endTime},(err,updateInfo) => {\r\n            if(err){\r\n              return res.json({'postStatus':'error','msg':'服务器更新出错'})\r\n            }\r\n            Server.findById({'_id':serverTo},{'ip':1},(err,dataIp) => {\r\n              if(err){\r\n                return res.json({'postStatus':'error','msg':'服务器查询IP出错'})\r\n              };\r\n              User.update({'_id':createData._id},{'user.uip':dataIp.ip},(err,updateIps) => {\r\n                if(err){\r\n                  return res.json({'postStatus':'error','msg':'用户写入IP出错'})\r\n                }\r\n                return res.json({'postStatus':'success','msg':'用户新增完成'})\r\n              });\r\n            });\r\n          });\r\n        });\r\n      };\r\n  });\r\n};\r\n\r\n//------------------------用户信息更新\r\nexports.updateUser = (req,res) => {\r\n  let id = req.body.id;\r\n  //查询信息\r\n  User.findById({'_id':id},{'user':1},(err,dataInfo) => {\r\n    if(err){\r\n      return res.json({'postStatus':'error','msg':'用户信息查询出错'})\r\n    }\r\n    return res.json({'postStatus':'success','msg':dataInfo})\r\n  });\r\n};\r\n//-------------------------------更新某数据\r\nexports.Ups = (req,res) => {\r\n  let username = req.body.name;\r\n  let userCarded = req.body.Carded;\r\n  let userPhoneNumber = req.body.PhoneNumber;\r\n  let userQQ = req.body.QQ;\r\n  let userAddress = req.body.Address;\r\n  let userPayment = req.body.Payment;\r\n  let userTo = req.body.uTo;\r\n  let serverTo = req.body.sTo;\r\n  let isPayment = req.body.Ament;\r\n  let id = req.body.id;\r\n  let serTo = req.body.serTo;\r\n  //判断当前值\r\n  if(serverTo == '1'){\r\n    //更新删除服务器\r\n    User.update({'_id':id},{\r\n      'user.username':username,\r\n      'user.userCarded':userCarded,\r\n      'user.userPhoneNumber':userPhoneNumber,\r\n      'user.userQQ':userQQ,\r\n      'user.userAddress':userAddress,\r\n      'user.userPayment':userPayment,\r\n      'user.userTo':userTo,\r\n      'user.serverTo':null,\r\n      'user.isPayment':isPayment,\r\n      'user.uip':[]\r\n    },(err,updateData) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'用户信息更新出错'})\r\n      }\r\n      if(serTo !== ''){\r\n        Server.update({'_id':serTo},{'serverMark':false},(err,updateInfo) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'用户关联服务器信息更新出错'})\r\n          }\r\n          return res.json({'postStatus':'success','msg':'用户信息更新完成'})\r\n        });\r\n      }else{\r\n        return res.json({'postStatus':'success','msg':'用户信息更新完成'})\r\n      }\r\n    })\r\n  }else{\r\n    User.update({'_id':id},{\r\n      'user.username':username,\r\n      'user.userCarded':userCarded,\r\n      'user.userPhoneNumber':userPhoneNumber,\r\n      'user.userQQ':userQQ,\r\n      'user.userAddress':userAddress,\r\n      'user.userPayment':userPayment,\r\n      'user.userTo':userTo,\r\n      'user.serverTo':serverTo,\r\n      'user.isPayment':isPayment,\r\n      'user.uip':null\r\n    },(err,updateData) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'用户信息更新出错'})\r\n      }\r\n      if(serTo !== ''){\r\n        Server.update({'_id':serTo},{'serverMark':false},(err,updateInfo) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'用户关联服务器信息出错,请刷新'})\r\n          }\r\n          Server.update({'_id':serverTo},{'serverMark':true},(err,updateInfo) => {\r\n            if(err){\r\n              return res.json({'postStatus':'error','msg':'用户关联服务器信息出错,请刷新'})\r\n            }\r\n            Server.findById({'_id':serverTo},{'ip':1},(err,findIps) => {\r\n              if(err){\r\n                return res.json({'postStatus':'error','msg':'用户查询IP信息出错,请刷新'})\r\n              }\r\n              User.update({'_id':id},{'user.uip':findIps.ip},(err,updateIis) => {\r\n               if(err){\r\n                 return res.json({'postStatus':'error','msg':'用户更新信息出错,请刷新'})\r\n               }\r\n                return res.json({'postStatus':'success','msg':'用户信息更新完成'})\r\n              });\r\n            });\r\n          });\r\n        });\r\n      }else{\r\n        Server.update({'_id':serverTo},{'serverMark':true},(err,updateInfo) => {\r\n          if(err){\r\n            return res.json({'postStatus':'error','msg':'用户关联服务器信息出错,请刷新'})\r\n          }\r\n          //console.log('No Update');\r\n          Server.findById({'_id':serverTo},{'ip':1},(err,dataIpeS) => {\r\n            if(err){\r\n              return res.json({'postStatus':'error','msg':'用户关联IP地址出错,请刷新'})\r\n            }\r\n            User.update({'_id':id},{'user.uip':dataIpeS.ip},(err,updateIis) => {\r\n              if(err){\r\n                return res.json({'postStatus':'error','msg':'用户更新信息出错,请刷新'})\r\n              }\r\n              return res.json({'postStatus':'success','msg':'用户信息更新完成'})\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n//------------------------------查询IP地址\r\nexports.searchStrIp = (req,res) => {\r\n  //获取表单数据\r\n  let ip = req.body.str;\r\n  if(ip.length <= 0){\r\n    return res.json({'postStatus':'error','msg':'IP地址不能为空'})\r\n  }\r\n  if(ip.includes(',')){\r\n    //true转换成数组\r\n    ip = ip.split(',');\r\n  }else{\r\n    //false 判断是否为字符串\r\n    if(typeof ip == 'string'){\r\n      ip = [ip]\r\n    }\r\n  }\r\n  //准备查询内容\r\n  User\r\n    .findOne({'user.search':true,'user.uip':{'$in':ip}})\r\n    .populate({\r\n      path:'user.serverTo',\r\n      match:{'ip':{'$in':ip}}\r\n    })\r\n    .exec((err,searchData) => {\r\n        if(err){\r\n          return res.json({'postStatus':'error','msg':'IP地址查询出错'});\r\n        }\r\n        return res.json({'postStatus':'success','msg':searchData});\r\n    });\r\n};\r\n\r\n//-------------------------------------查询用户编号\r\nexports.searchStrId = (req,res) => {\r\n  //获取表单数据\r\n  let id = req.body.str;\r\n  if(id.length <= 0){\r\n    return res.json({'postStatus':'error','msg':'用户平台名称不能为空'})\r\n  }\r\n  id = id.trim();\r\n  User\r\n    .find({'user.search':true,'user.webName':id})\r\n    .populate({\r\n      path:'user.serverTo'\r\n    })\r\n    .exec((err,searchData) => {\r\n      if(err){\r\n        return res.json({'postStatus':'error','msg':'ID用户查询出错'});\r\n      }\r\n      return res.json({'postStatus':'success','msg':searchData});\r\n    });\r\n};"]}