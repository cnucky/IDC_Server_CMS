{"version":3,"sources":["_pack-ieee754.js"],"names":[],"mappings":"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","file":"_pack-ieee754-compiled.js","sourcesContent":["// Credit: https://github.com/paulmillr/es6-shim/\n\n'use strict';\n\nvar abs = Math.abs, floor = Math.floor, log = Math.log, min = Math.min\n  , pow = Math.pow, LN2 = Math.LN2\n  , roundToEven;\n\nroundToEven = function (n) {\n\tvar w = floor(n), f = n - w;\n\tif (f < 0.5) return w;\n\tif (f > 0.5) return w + 1;\n\treturn w % 2 ? w + 1 : w;\n};\n\nmodule.exports = function (v, ebits, fbits) {\n\tvar bias = (1 << (ebits - 1)) - 1, s, e, f, i, bits, str, bytes;\n\n\t// Compute sign, exponent, fraction\n\tif (isNaN(v)) {\n\t\t// NaN\n\t\t// http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\n\t\te = (1 << ebits) - 1;\n\t\tf = pow(2, fbits - 1);\n\t\ts = 0;\n\t} else if (v === Infinity || v === -Infinity) {\n\t\te = (1 << ebits) - 1;\n\t\tf = 0;\n\t\ts = (v < 0) ? 1 : 0;\n\t} else if (v === 0) {\n\t\te = 0;\n\t\tf = 0;\n\t\ts = (1 / v === -Infinity) ? 1 : 0;\n\t} else {\n\t\ts = v < 0;\n\t\tv = abs(v);\n\n\t\tif (v >= pow(2, 1 - bias)) {\n\t\t\te = min(floor(log(v) / LN2), 1023);\n\t\t\tf = roundToEven(v / pow(2, e) * pow(2, fbits));\n\t\t\tif (f / pow(2, fbits) >= 2) {\n\t\t\t\te = e + 1;\n\t\t\t\tf = 1;\n\t\t\t}\n\t\t\tif (e > bias) {\n\t\t\t\t// Overflow\n\t\t\t\te = (1 << ebits) - 1;\n\t\t\t\tf = 0;\n\t\t\t} else {\n\t\t\t\t// Normal\n\t\t\t\te = e + bias;\n\t\t\t\tf = f - pow(2, fbits);\n\t\t\t}\n\t\t} else {\n\t\t\t// Subnormal\n\t\t\te = 0;\n\t\t\tf = roundToEven(v / pow(2, 1 - bias - fbits));\n\t\t}\n\t}\n\n\t// Pack sign, exponent, fraction\n\tbits = [];\n\tfor (i = fbits; i; i -= 1) {\n\t\tbits.push(f % 2 ? 1 : 0);\n\t\tf = floor(f / 2);\n\t}\n\tfor (i = ebits; i; i -= 1) {\n\t\tbits.push(e % 2 ? 1 : 0);\n\t\te = floor(e / 2);\n\t}\n\tbits.push(s ? 1 : 0);\n\tbits.reverse();\n\tstr = bits.join('');\n\n\t// Bits to bytes\n\tbytes = [];\n\twhile (str.length) {\n\t\tbytes.push(parseInt(str.substring(0, 8), 2));\n\t\tstr = str.substring(8);\n\t}\n\treturn bytes;\n};\n"]}