{"version":3,"sources":["shim.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA,IAAI,OAAO,MAAM,SAAN,CAAgB,IAA3B;AAAA,IAAiC,MAAM,KAAK,GAA5C;AAAA,IAAiD,OAAO,KAAK,IAA7D;AAAA,IAEI,UAAU,SAAV,OAAU,CAAU,CAAV,EAAa,CAAb,EAAgB;AAAE,QAAO,IAAI,CAAX;AAAe,CAF/C;AAAA,IAGI,SAAS,SAAT,MAAS,CAAU,CAAV,EAAa;AAAE,QAAO,IAAI,IAAX;AAAkB,CAH9C;AAAA,IAII,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe,MAAf,EAAuB;AAAE,QAAO,MAAM,SAAS,MAAtB;AAA+B,CAJlE;;AAMA,OAAO,OAAP,GAAiB,UAAU,IAAV,EAAgB,IAAhB,CAAoB,WAApB,EAAiC;AACjD,KAAI,MAAJ,EAAY,OAAZ;AACA,KAAI,CAAC,UAAU,MAAf,EAAuB,OAAO,CAAP;AACvB,MAAK,IAAL,CAAU,SAAV,EAAqB,UAAU,GAAV,EAAe;AACnC,MAAI,MAAM,GAAN,CAAJ,EAAgB;AACf,YAAS,GAAT;AACA;AACA;AACD,MAAI,CAAC,SAAS,GAAT,CAAL,EAAoB;AACnB,YAAS,QAAT;AACA,UAAO,IAAP;AACA;AACD,MAAI,WAAW,SAAf,EAA0B;AAC1B,QAAM,OAAO,GAAP,CAAN;AACA,MAAI,QAAQ,CAAZ,EAAe;AACf,MAAI,CAAC,OAAL,EAAc,UAAU,CAAC,IAAI,GAAJ,CAAD,CAAV,CAAd,KACK,QAAQ,IAAR,CAAa,IAAI,GAAJ,CAAb;AACL,EAdD;AAeA,KAAI,WAAW,SAAf,EAA0B,OAAO,MAAP;AAC1B,KAAI,CAAC,OAAL,EAAc,OAAO,CAAP;;AAEd,SAAQ,IAAR,CAAa,OAAb;AACA,QAAO,QAAQ,CAAR,IAAa,KAAK,QAAQ,GAAR,CAAY,MAAZ,EAAoB,QAAQ,CAAR,CAApB,EAAgC,MAAhC,CAAuC,GAAvC,EAA4C,CAA5C,CAAL,CAApB;AACA,CAvBD","file":"shim-compiled.js","sourcesContent":["// Thanks for hints: https://github.com/paulmillr/es6-shim\n\n'use strict';\n\nvar some = Array.prototype.some, abs = Math.abs, sqrt = Math.sqrt\n\n  , compare = function (a, b) { return b - a; }\n  , divide = function (x) { return x / this; }\n  , add = function (sum, number) { return sum + number * number; };\n\nmodule.exports = function (val1, val2/*, â€¦valn*/) {\n\tvar result, numbers;\n\tif (!arguments.length) return 0;\n\tsome.call(arguments, function (val) {\n\t\tif (isNaN(val)) {\n\t\t\tresult = NaN;\n\t\t\treturn;\n\t\t}\n\t\tif (!isFinite(val)) {\n\t\t\tresult = Infinity;\n\t\t\treturn true;\n\t\t}\n\t\tif (result !== undefined) return;\n\t\tval = Number(val);\n\t\tif (val === 0) return;\n\t\tif (!numbers) numbers = [abs(val)];\n\t\telse numbers.push(abs(val));\n\t});\n\tif (result !== undefined) return result;\n\tif (!numbers) return 0;\n\n\tnumbers.sort(compare);\n\treturn numbers[0] * sqrt(numbers.map(divide, numbers[0]).reduce(add, 0));\n};\n"]}