{"version":3,"sources":["_unpack-ieee754.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA,IAAI,MAAM,KAAK,GAAf;;AAEA,OAAO,OAAP,GAAiB,UAAU,KAAV,EAAiB,KAAjB,EAAwB,KAAxB,EAA+B;AAC/C;AACA,KAAI,OAAO,EAAX;AAAA,KAAe,CAAf;AAAA,KAAkB,CAAlB;AAAA,KAAqB,CAArB;AAAA,KAAwB,GAAxB;AAAA,KACA,IADA;AAAA,KACM,CADN;AAAA,KACS,CADT;AAAA,KACY,CADZ;;AAGA,MAAK,IAAI,MAAM,MAAf,EAAuB,CAAvB,EAA0B,KAAK,CAA/B,EAAkC;AACjC,MAAI,MAAM,IAAI,CAAV,CAAJ;AACA,OAAK,IAAI,CAAT,EAAY,CAAZ,EAAe,KAAK,CAApB,EAAuB;AACtB,QAAK,IAAL,CAAU,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAtB;AACA,OAAI,KAAK,CAAT;AACA;AACD;AACD,MAAK,OAAL;AACA,OAAM,KAAK,IAAL,CAAU,EAAV,CAAN;;AAEA;AACA,QAAO,CAAC,KAAM,QAAQ,CAAf,IAAqB,CAA5B;AACA,KAAI,SAAS,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAT,EAA8B,CAA9B,IAAmC,CAAC,CAApC,GAAwC,CAA5C;AACA,KAAI,SAAS,IAAI,SAAJ,CAAc,CAAd,EAAiB,IAAI,KAArB,CAAT,EAAsC,CAAtC,CAAJ;AACA,KAAI,SAAS,IAAI,SAAJ,CAAc,IAAI,KAAlB,CAAT,EAAmC,CAAnC,CAAJ;;AAEA;AACA,KAAI,MAAM,CAAC,KAAK,KAAN,IAAe,CAAzB,EAA4B,OAAO,MAAM,CAAN,GAAU,GAAV,GAAgB,IAAI,QAA3B;AAC5B,KAAI,IAAI,CAAR,EAAW,OAAO,IAAI,IAAI,CAAJ,EAAO,IAAI,IAAX,CAAJ,IAAwB,IAAI,IAAI,IAAI,CAAJ,EAAO,KAAP,CAAhC,CAAP;AACX,KAAI,MAAM,CAAV,EAAa,OAAO,IAAI,IAAI,CAAJ,EAAO,EAAE,OAAO,CAAT,CAAP,CAAJ,IAA2B,IAAI,IAAI,CAAJ,EAAO,KAAP,CAA/B,CAAP;AACb,QAAO,IAAI,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACA,CA1BD","file":"_unpack-ieee754-compiled.js","sourcesContent":["// Credit: https://github.com/paulmillr/es6-shim/\n\n'use strict';\n\nvar pow = Math.pow;\n\nmodule.exports = function (bytes, ebits, fbits) {\n\t// Bytes to bits\n\tvar bits = [], i, j, b, str,\n\tbias, s, e, f;\n\n\tfor (i = bytes.length; i; i -= 1) {\n\t\tb = bytes[i - 1];\n\t\tfor (j = 8; j; j -= 1) {\n\t\t\tbits.push(b % 2 ? 1 : 0);\n\t\t\tb = b >> 1;\n\t\t}\n\t}\n\tbits.reverse();\n\tstr = bits.join('');\n\n\t// Unpack sign, exponent, fraction\n\tbias = (1 << (ebits - 1)) - 1;\n\ts = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n\te = parseInt(str.substring(1, 1 + ebits), 2);\n\tf = parseInt(str.substring(1 + ebits), 2);\n\n\t// Produce number\n\tif (e === (1 << ebits) - 1) return f !== 0 ? NaN : s * Infinity;\n\tif (e > 0) return s * pow(2, e - bias) * (1 + f / pow(2, fbits));\n\tif (f !== 0) return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));\n\treturn s < 0 ? -0 : 0;\n};\n"]}